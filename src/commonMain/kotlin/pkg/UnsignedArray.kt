@file:Suppress("RemoveExplicitTypeArguments", "ReplaceAssociateFunction", "DuplicatedCode")

package pkg

import kotlinx.cinterop.convert
import platform.posix.size_t
import kotlin.random.Random

fun uIntArray(uintArray: PlatformUIntArray, supportArray: PlatformUIntArray) {
    println("uintArray.contentToString(): ${uintArray.contentToString()}")
    println("supportArray.contentToString(): ${supportArray.contentToString()}")
    println("all { 3 < it && it < 7 }: ${uintArray.all { 3u < it && it < 7u }}")
    println("any(): ${uintArray.any()}")
    println("any { 3 < it && it < 7 }: ${uintArray.any { 3u < it && it < 7u }}")
    println("asIterable().iterator().hasNext(): ${uintArray.asIterable().iterator().hasNext()}")
    println("asList().subList(0, 1): ${uintArray.asList().subList(0, 1)}")
    println("asSequence().toList(): ${uintArray.asSequence().toList()}")
    println("associate { it to it }: ${uintArray.associate { it to it }}")
    println("associateBy { it.toDouble() }: ${uintArray.associateBy { it.toDouble() }}")
    println("associateBy({ it.toDouble() }, { it.toShort() }): ${uintArray.associateBy({ it.toDouble() }, { it.toShort() })}")
    println("associateByTo(mutableMapOf()) { it.toDouble() }: ${uintArray.associateByTo(mutableMapOf()) { it.toDouble() }}")
    println("associateByTo(mutableMapOf(), { it.toDouble() }, { it.toShort() }): ${uintArray.associateByTo(mutableMapOf(), { it.toDouble() }, { it.toShort() })}")
    println("associateTo(mutableMapOf()) { it.toString() to it.toDouble() }: ${uintArray.associateTo(mutableMapOf()) { it.toString() to it.toDouble() }}")
    println("associateWith { it.shl(5) }: ${uintArray.associateWith { it.shl(5) }}")
    println("associateWithTo(mutableMapOf()) { it.shr(1) }: ${uintArray.associateWithTo(mutableMapOf()) { it.shr(1) }}")
    println("component1(): ${uintArray.component1()}")
    println("component2(): ${uintArray.component2()}")
    println("component3(): ${uintArray.component3()}")
    println("component4(): ${uintArray.component4()}")
    println("component5(): ${uintArray.component5()}")
    val (e1, e2, e3, e4, e5) = uintArray
    println("val (e1, e2, e3, e4, e5) = uintArray: $e1, $e2, $e3, $e4, $e5")
    println("contains(42.convert<size_t>()): ${uintArray.contains(42.convert<size_t>())}")
    println("contentEquals(supportArray): ${uintArray.contentEquals(supportArray)}")
    println("contentHashCode(): ${uintArray.contentHashCode()}")
    println("copyInto(supportArray, 1, 1, 3): ${uintArray.copyInto(supportArray, 1, 1, 3).contentToString()}")
    println("copyOf(): ${uintArray.copyOf().contentToString()}")
    println("copyOf(10): ${uintArray.copyOf(10).contentToString()}")
    println("copyOfRange(1, 3): ${uintArray.copyOfRange(1, 3).contentToString()}")
    println("count(): ${uintArray.count()}")
    println("count { it > 5 }: ${uintArray.count { it > 5u }}")
    println("distinct(): ${uintArray.distinct()}")
    println("distinctBy { it % 2 }: ${uintArray.distinctBy { it % 2u }}")
    println("drop(2): ${uintArray.drop(2)}")
    println("dropLast(3): ${uintArray.dropLast(3)}")
    println("dropLastWhile { it > 5 }: ${uintArray.dropLastWhile { it > 5u }}")
    println("dropWhile { it < 3 }: ${uintArray.dropWhile { it < 3u }}")
    println("elementAt(0): ${uintArray.elementAt(0)}")
    println("elementAtOrElse(Int.MAX_VALUE) { 42.convert<size_t>() }: ${uintArray.elementAtOrElse(Int.MAX_VALUE) { 42.convert<size_t>() }}")
    println("elementAtOrNull(0): ${uintArray.elementAtOrNull(0)}")
    println("fill(42.convert<size_t>(), 0, 2): ${uintArray.fill(42.convert<size_t>(), 0, 2)}")
    println("filter { it == 42.convert<size_t>() }: ${uintArray.filter { it == 42.convert<size_t>() }}")
    println("filterIndexed { ix, it -> it > ix }: ${uintArray.filterIndexed { ix, it -> it > ix.toUInt() }}")
    println("filterIndexedTo(mutableSetOf()) { ix, it -> it > ix }: ${uintArray.filterIndexedTo(mutableSetOf()) { ix, it -> it > ix.toUInt() }}")
    println("filterNot { it.toString().length > 1 }: ${uintArray.filterNot { it.toString().length > 1 }}")
    println("filterNotTo(mutableListOf()) { false }: ${uintArray.filterNotTo(mutableListOf()) { false }}")
    println("filterTo(mutableListOf()) { true }: ${uintArray.filterTo(mutableListOf()) { true }}")
    println("find { it == 42.convert<size_t>() }: ${uintArray.find { it == 42.convert<size_t>() }}")
    println("findLast { it % 2 == 0.convert<size_t>() }: ${uintArray.findLast { it % 2u == 0.convert<size_t>() }}")
    println("first(): ${uintArray.first()}")
    println("first { it + 4L == 15L }: ${uintArray.first { it + 4UL == 46UL }}")
    println("firstOrNull(): ${uintArray.firstOrNull()}")
    @Suppress("INCOMPATIBLE_TYPES")
    println("firstOrNull { it is Long }: ${uintArray.firstOrNull { it is Long }}")
    println("flatMap { listOf(it, it + 1) }: ${uintArray.flatMap { listOf(it, it + 1u) }}")
    println("flatMapIndexed { ix, it -> listOf(ix, it) }: ${uintArray.flatMapIndexed { ix, it -> listOf(ix, it) }}")
    println("flatMapIndexedTo(mutableListOf()) { ix, it -> listOf(ix, ix + it) }: ${uintArray.flatMapIndexedTo(mutableListOf()) { ix, it -> listOf(ix, ix + it.toInt()) }}")
    println("flatMapTo(mutableListOf()) { setOf(it, 1 - it) }: ${uintArray.flatMapTo(mutableListOf()) { setOf(it, 1u - it) }}")
    println("fold(5) { acc, next -> (acc + next).toInt() }: ${uintArray.fold(5u) { acc, next -> (acc + next).toUInt() }}")
    println("foldIndexed(5.convert<size_t>()) { _, acc, next -> acc + next }: ${uintArray.foldIndexed(5.convert<size_t>()) { _, acc, next -> acc + next }}")
    println("foldRight(5) { acc, next -> (acc + next).toInt() }: ${uintArray.foldRight(5u) { acc, next -> (acc + next).toUInt() }}")
    println("foldRightIndexed(5.convert<size_t>()) { _, acc, next -> acc + next }: ${uintArray.foldRightIndexed(5.convert<size_t>()) { _, acc, next -> acc + next }}")
    println("^^ntArray.forEach(::print)")
    uintArray.forEach(::print).also { println() }
    println("^^uintArray.forEachIndexed { ix, it -> print(\"\$ix: \$it\") }: ")
    uintArray.forEachIndexed { ix, it -> print("$ix: $it") }.also { println() }
    println("getOrElse(42) { 42.convert<size_t>() }: ${uintArray.getOrElse(42) { 42.convert<size_t>() }}")
    println("getOrNull(42): ${uintArray.getOrNull(42)}")
    println("groupBy { it % 2 == 1.convert<size_t>() }: ${uintArray.groupBy { it % 2u == 1.convert<size_t>() }}")
    println("groupBy({ it % 2 == 1.convert<size_t>() }, size_t::toString): ${uintArray.groupBy({ it % 2u == 1.convert<size_t>() }, size_t::toString)}")
    println("groupByTo(mutableMapOf()) { it % 2 == 1.convert<size_t>() }: ${uintArray.groupByTo(mutableMapOf()) { it % 2u == 1.convert<size_t>() }}")
    println("groupByTo(mutableMapOf(), { it % 2 == 1.convert<size_t>() }, size_t::toString): ${uintArray.groupByTo(mutableMapOf(), { it % 2u == 1.convert<size_t>() }, size_t::toString)}")
    println("indexOf(4.convert<size_t>()): ${uintArray.indexOf(4.convert<size_t>())}")
    println("indexOfFirst { it == 5.convert<size_t>() }: ${uintArray.indexOfFirst { it == 5.convert<size_t>() }}")
    println("indexOfLast { it == 5.convert<size_t>() }: ${uintArray.indexOfLast { it == 5.convert<size_t>() }}")
    println("indices: ${uintArray.indices}")
    println("intersect(supportArray.asIterable()): ${uintArray.intersect(supportArray.asIterable())}")
    println("isEmpty(): ${uintArray.isEmpty()}")
    println("isNotEmpty(): ${uintArray.isNotEmpty()}")
    println("joinTo(StringBuilder(\"joinTo: \")): ${uintArray.joinTo(StringBuilder("joinTo: "))}")
    println("joinToString(): ${uintArray.joinToString()}")
    println("last(): ${uintArray.last()}")
    println("last { it > 5 }: ${uintArray.last { it > 5u }}")
    println("lastIndex: ${uintArray.lastIndex}")
    println("lastIndexOf(42.convert<size_t>()): ${uintArray.lastIndexOf(42.convert<size_t>())}")
    println("lastOrNull(): ${uintArray.lastOrNull()}")
    println("lastOrNull { it.toString().length < 2 }: ${uintArray.lastOrNull { it.toString().length < 2 }}")
    println("map(size_t::toULong): ${uintArray.map(size_t::toULong)}")
    println("mapIndexed { ix, it -> it.toUByte() }: ${uintArray.mapIndexed { _, it -> it.toUByte() }}")
    println("mapIndexedTo(mutableListOf()) { ix, it -> it.toUShort() }: ${uintArray.mapIndexedTo(mutableListOf()) { _, it -> it.toUShort() }}")
    println("mapTo(mutableListOf()) { it + 2 }: ${uintArray.mapTo(mutableListOf()) { it + 2u }}")
    println("maxByOrNull { it }: ${uintArray.maxByOrNull { it }}")
    println("maxOf { it.toDouble() }: ${uintArray.maxOf { it.toDouble() }}")
    println("maxOf { it.toFloat() }: ${uintArray.maxOf { it.toFloat() }}")
    println("maxOf { it + 1 }: ${uintArray.maxOf { it + 1u }}")
    println("maxOfOrNull { it.toDouble() }: ${uintArray.maxOfOrNull { it.toDouble() }}")
    println("maxOfOrNull { it.toFloat() }: ${uintArray.maxOfOrNull { it.toFloat() }}")
    println("maxOfOrNull { it + 1 }: ${uintArray.maxOfOrNull { it + 1u }}")
    println("maxOfWith({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }: ${uintArray.maxOfWith({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }}")
    println("maxOfWithOrNull({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }: ${uintArray.maxOfWithOrNull({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }}")
    println("maxOrNull(): ${uintArray.maxOrNull()}")
    println("maxWithOrNull { s1, s2 -> s1.compareTo(s2) }: ${uintArray.maxWithOrNull { s1, s2 -> s1.compareTo(s2) }}")
    println("minByOrNull { it.toString() }: ${uintArray.minByOrNull { it.toString() }}")
    println("minOf { it.toDouble() }: ${uintArray.minOf { it.toDouble() }}")
    println("minOf { it.toFloat() }: ${uintArray.minOf { it.toFloat() }}")
    println("minOf { it + 1 }: ${uintArray.minOf { it + 1u }}")
    println("minOfOrNull { it.toDouble() }: ${uintArray.minOfOrNull { it.toDouble() }}")
    println("minOfOrNull { it.toFloat() }: ${uintArray.minOfOrNull { it.toFloat() }}")
    println("minOfOrNull { it + 1 }: ${uintArray.minOfOrNull { it + 1u }}")
    println("minOfWith({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }: ${uintArray.minOfWith({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }}")
    println("minOfWithOrNull({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }: ${uintArray.minOfWithOrNull({ s1, s2 -> s1.compareTo(s2) }) { it.toString() }}")
    println("minOrNull(): ${uintArray.minOrNull()}")
    println("minWithOrNull { s1, s2 -> s1.toString().compareTo(s2.toString()) }: ${uintArray.minWithOrNull { s1, s2 -> s1.toString().compareTo(s2.toString()) }}")
    println("none(): ${uintArray.none()}")
    println("none { it > 0 }: ${uintArray.none { it > 0u }}")
    println(": uintArray.onEach { print(\"\$it \") }: ${uintArray.onEach { print("$it ") }.contentToString()} ")
    println(": uintArray.onEachIndexed { ix, it -> print(\"\$ix: \$it \") }: ${uintArray.onEachIndexed { ix, it -> print("$ix: $it ") }.contentToString()}")
    println("partition { it < 6 }: ${uintArray.partition { it < 6u }}")
    println("uintArray + 1.convert<size_t>(): ${(uintArray + 1.convert<size_t>()).contentToString()}")
    println("uintArray + listOf(42.convert<size_t>()): ${(uintArray + listOf(42.convert<size_t>())).contentToString()}")
    println("uintArray + supportArray: ${(uintArray + supportArray).contentToString()}")
    println("random(): ${uintArray.random()}")
    println("random(Random(42)): ${uintArray.random(Random(42))}")
    println("randomOrNull(): ${uintArray.randomOrNull()}")
    println("randomOrNull(Random(42)): ${uintArray.randomOrNull(Random(42))}")
    println("reduce { acc, next -> acc + next }: ${uintArray.reduce { acc, next -> acc + next }}")
    println("reduceIndexed { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.contentToString()} -> ${uintArray.reduceIndexed { ix, acc, next -> ix.toUInt() + acc + next }}")
    println("reduceIndexedOrNull { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.reduceIndexedOrNull { ix, acc, next -> ix.toUInt() + acc + next }}")
    println("reduceOrNull { acc, next -> acc + next }: ${uintArray.reduceOrNull { acc, next -> acc + next }}")
    println("reduceRight { acc, next -> acc + next }: ${uintArray.reduceRight { acc, next -> acc + next }}")
    println("reduceRightIndexed { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.contentToString()} -> ${uintArray.reduceRightIndexed { ix, acc, next -> ix.toUInt() + acc + next }}")
    println("reduceRightIndexedOrNull { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.reduceRightIndexedOrNull { ix, acc, next -> ix.toUInt() + acc + next }}")
    println("reduceRightOrNull { acc, next -> acc + next }: ${uintArray.reduceRightOrNull { acc, next -> acc + next }}")
    println("reverse(): ${uintArray.reverse()}")
    println("reverse(1, 3): ${uintArray.reverse(1, 3)}")
    println("reversed(): ${uintArray.reversed()}")
    println("reversedArray(): ${uintArray.reversedArray()}")
    println("runningFold(5) { acc, next -> (acc + next).toInt() }: ${uintArray.runningFold(5u) { acc, next -> (acc + next).toUInt() }}")
    println("runningFoldIndexed(5) { ix, acc, next -> (acc + next + ix).toInt() }: ${uintArray.runningFoldIndexed(5u) { ix, acc, next -> (acc + next + ix.toUInt()).toUInt() }}")
    println("runningReduce { acc, next -> acc + next }: ${uintArray.runningReduce { acc, next -> acc + next }}")
    println("runningReduceIndexed { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.runningReduceIndexed { ix, acc, next -> ix.toUInt() + acc + next }}")
    println("scan(1.convert<size_t>()) { acc, next -> acc + next }: ${uintArray.scan(1.convert<size_t>()) { acc, next -> acc + next }}")
    println("scanIndexed(1.convert<size_t>()) { ix, acc, next -> ix.toUInt() + acc + next }: ${uintArray.scanIndexed(1.convert<size_t>()) { ix, acc, next -> ix.toUInt() + acc + next }}")
    uintArray.shuffle()
    println("shuffle(): ${uintArray.contentToString()}")
    uintArray.shuffle(Random(42))
    println("shuffle(Random(42)): ${uintArray.contentToString()}")
    println("single(): ${try { uintArray.single() } catch (e: Exception) { e } }")
    println("single { it == 10.convert<size_t>() }: ${uintArray.single { it == 10.convert<size_t>() }}")
    println("singleOrNull(): ${uintArray.singleOrNull()}")
    println("singleOrNull { it == 0.convert<size_t>() }: ${uintArray.singleOrNull { it == 0.convert<size_t>() }}")
    println("slice(2..4): ${uintArray.slice(2..4)}")
    println("slice(listOf(1, 3, 5)): ${uintArray.slice(listOf(1, 3, 5))}")
    println("sliceArray(2..4).contentToString(): ${uintArray.sliceArray(2..4).contentToString()}")
    println("sliceArray(listOf(1, 3, 5).contentToString()): ${uintArray.sliceArray(listOf(1, 3, 5)).contentToString()}")
    println("sort(): ${uintArray.sort().let { uintArray }}")
    println("sort(1, 5): ${uintArray.sort(1, 5).let { uintArray}}")
    println("sortDescending(): ${uintArray.sortDescending().let{ uintArray }}")
    println("sortDescending(1, 5): ${uintArray.sortDescending(1, 5).let{ uintArray }}")
    println("sorted(): ${uintArray.sorted()}")
    println("sortedArray(): ${uintArray.sortedArray().contentToString()}")
    println("sortedArrayDescending(): ${uintArray.sortedArrayDescending().contentToString()}")
    println("sortedBy(size_t::toString): ${uintArray.sortedBy(size_t::toString)}")
    println("sortedByDescending(size_t::toString): ${uintArray.sortedByDescending(size_t::toString)}")
    println("sortedDescending(): ${uintArray.sortedDescending()}")
    println("sortedWith { a, b -> b.compareTo(a) }: ${uintArray.sortedWith { a, b -> b.compareTo(a) }}")
    println("subtract(setOf(42.convert<size_t>())): ${uintArray.subtract(setOf(42.convert<size_t>()))}")
    println("sum(): ${uintArray.sum()}")
    println("sumBy(size_t::toInt): ${uintArray.sumBy(size_t::toInt)}")
    println("sumByDouble { it.toDouble() }: ${uintArray.sumByDouble { it.toDouble() }}")
    println("sumOf { it.toInt() }: ${uintArray.sumOf { it.toInt() }}")
    println("sumOf { it.toLong() }: ${uintArray.sumOf { it.toLong() }}")
    println("sumOf { it.toDouble() }: ${uintArray.sumOf { it.toDouble() }}")
    println("sumOf { it.toUInt() }: ${uintArray.sumOf { it.toUInt() }}")
    println("sumOf { it.toULong() }: ${uintArray.sumOf { it.toULong() }}")
    println("take(3): ${uintArray.take(3)}")
    println("takeLast(2): ${uintArray.takeLast(2)}")
    println("takeLastWhile { it == 42.convert<size_t>() }: ${uintArray.takeLastWhile { it == 42.convert<size_t>() }}")
    println("takeWhile { it < 10 }: ${uintArray.takeWhile { it < 10u }}")
    println("toCollection(mutableSetOf()): ${uintArray.toCollection(mutableSetOf())}")
    println("toHashSet(): ${uintArray.toHashSet()}")
    println("toList(): ${uintArray.toList()}")
    println("toMutableList(): ${uintArray.toMutableList()}")
    println("toMutableSet(): ${uintArray.toMutableSet()}")
    println("toSet(): ${uintArray.toSet()}")
    println("toTypedArray(): ${uintArray.toTypedArray().contentToString()}")
    println("union(listOf(100.convert<size_t>())): ${uintArray.union(listOf(100.convert<size_t>()))}")
    println("withIndex().toList(): ${uintArray.withIndex().toList()}")
    println("zip(supportArray): ${uintArray.zip(supportArray)}")
    println("zip(supportArray) { my, their -> \"\$my\$their\"}: ${uintArray.zip(supportArray) { my, their -> "$my$their"}}")
    println("zip(listOf(1, 2, 3)): ${uintArray.zip(listOf(1, 2, 3))}")
    println("zip(listOf(1, 2, 3)) { my, their -> \"\$my\$their\"}: ${uintArray.zip(listOf(1, 2, 3)) { my, their -> "$my$their"}}")
    println("zip(arrayOf(4, 5, 6)): ${uintArray.zip(arrayOf(4, 5, 6))}")
    println("zip(arrayOf(4, 5, 6)) { my, their -> \"\$my\$their\" }: ${uintArray.zip(arrayOf(4, 5, 6)) { my, their -> "$my$their" }}")

    /* deprecated */
    //    uintArray.max()
    //    uintArray.maxBy { -it }
    //    uintArray.maxWith { s1, s2 -> s1.compareTo(s2)}
    //    uintArray.min()
    //    uintArray.minBy { it.toString() }
    //    uintArray.minWith { s1, s2 -> s1.toString().compareTo(s2.toString())}

    /* doesn't exist for unsigned */
    //    println("average(): ${uintArray.average()}")
}
